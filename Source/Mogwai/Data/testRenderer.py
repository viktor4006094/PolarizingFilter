from falcor import *

def render_graph_ForwardRenderer():
    g = RenderGraph("ForwardRenderer")
    loadRenderPassLibrary("BSDFViewer.dll")
    loadRenderPassLibrary("AccumulatePass.dll")
    loadRenderPassLibrary("TemporalDelayPass.dll")
    loadRenderPassLibrary("Antialiasing.dll")
    loadRenderPassLibrary("BlitPass.dll")
    loadRenderPassLibrary("CSM.dll")
    loadRenderPassLibrary("DebugPasses.dll")
    loadRenderPassLibrary("DepthPass.dll")
    loadRenderPassLibrary("ErrorMeasurePass.dll")
    loadRenderPassLibrary("WhittedRayTracer.dll")
    loadRenderPassLibrary("PixelInspectorPass.dll")
    loadRenderPassLibrary("ForwardLightingPass.dll")
    loadRenderPassLibrary("GBuffer.dll")
    loadRenderPassLibrary("SkyBox.dll")
    loadRenderPassLibrary("ImageLoader.dll")
    loadRenderPassLibrary("MegakernelPathTracer.dll")
    loadRenderPassLibrary("MinimalPathTracer.dll")
    loadRenderPassLibrary("PassLibraryTemplate.dll")
    loadRenderPassLibrary("SSAO.dll")
    loadRenderPassLibrary("SVGFPass.dll")
    loadRenderPassLibrary("ToneMapper.dll")
    loadRenderPassLibrary("Utils.dll")
    DepthPrePass = RenderPass("DepthPass", {'depthFormat': ResourceFormat.D32Float})
    g.addPass(DepthPrePass, "DepthPrePass")
    LightingPass = RenderPass("ForwardLightingPass", {'sampleCount': 1, 'enableSuperSampling': False})
    g.addPass(LightingPass, "LightingPass")
    ShadowPass = RenderPass("CSM", {'mapSize': uint2(2048,2048), 'visibilityBufferSize': uint2(1920,1080), 'cascadeCount': 4, 'visibilityMapBitsPerChannel': 32, 'kSdsmReadbackLatency': 1, 'blurWidth': 5, 'blurSigma': 2.0})
    g.addPass(ShadowPass, "ShadowPass")
    BlitPass = RenderPass("BlitPass", {'filter': SamplerFilter.Linear})
    g.addPass(BlitPass, "BlitPass")
    ToneMapping = RenderPass("ToneMapper", {'exposureCompensation': 0.0, 'autoExposure': True, 'exposureValue': 0.0, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137})
    g.addPass(ToneMapping, "ToneMapping")
    SSAO = RenderPass("SSAO", {'aoMapSize': uint2(1024,1024), 'kernelSize': 16, 'noiseSize': uint2(16,16), 'radius': 0.10000000149011612, 'distribution': SampleDistribution.CosineHammersley, 'blurWidth': 5, 'blurSigma': 2.0})
    g.addPass(SSAO, "SSAO")
    FXAA = RenderPass("FXAA", {'qualitySubPix': 0.75, 'qualityEdgeThreshold': 0.16599999368190765, 'qualityEdgeThresholdMin': 0.08330000191926956, 'earlyOut': True})
    g.addPass(FXAA, "FXAA")
    SkyBox = RenderPass("SkyBox", {'texName': '', 'loadAsSrgb': True, 'filter': SamplerFilter.Linear})
    g.addPass(SkyBox, "SkyBox")
    g.addEdge("DepthPrePass.depth", "SkyBox.depth")
    g.addEdge("SkyBox.target", "LightingPass.color")
    g.addEdge("DepthPrePass.depth", "ShadowPass.depth")
    g.addEdge("DepthPrePass.depth", "LightingPass.depth")
    g.addEdge("LightingPass.color", "ToneMapping.src")
    g.addEdge("FXAA.dst", "BlitPass.src")
    g.addEdge("ShadowPass.visibility", "LightingPass.visibilityBuffer")
    g.addEdge("ToneMapping.dst", "FXAA.src")
    g.markOutput("BlitPass.dst")
    return g

ForwardRenderer = render_graph_ForwardRenderer()
try: m.addGraph(ForwardRenderer)
except NameError: None
